import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import type { AppProps } from 'next/app'
import App from "next/app";
import { ReactNode, useEffect } from "react";
import { useIsomorphicLayoutEffect } from "swr/dist/_internal";
import { useRouter } from "next/router";
import { RoutePath } from "@/lib/router";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// export default function App({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );

// }
// export default function App({ Component, pageProps }: AppProps) {
//   return <Component {...pageProps} />
// }
interface Props {
  children?: ReactNode
  // any props that come into the component
}

const DefaultLayout = ({ children }: Props) => {
  return(
    <>{children}</>
  )
  
};

const publicRoutes = [
  RoutePath.LOGIN,
  RoutePath.REGISTER
]
const MyApp = ({ Component, pageProps }: AppProps) => {
  // Use the layout defined at the page level, or fallback to the default layout
  const router = useRouter();

  useEffect(() => {
    const accessToken = localStorage.getItem('access-token');
    // const publicRoutes = ['/auth/signin'];

    if (!accessToken && !publicRoutes.includes(router.pathname as RoutePath)) {
      router.push(RoutePath.LOGIN); // Redirect to sign-in if not authenticated
    }

    if (accessToken && publicRoutes.includes(router.pathname as RoutePath)) {
      router.push(RoutePath.DASHBOARD); // Redirect to sign-in if not authenticated
    }
    console.log('router',router)
  }, [router]);
  const Layout = (Component as any).Layout || DefaultLayout;

  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
};



export default MyApp;